/**
 * This file was initially AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
import { getConfiguration } from "@/config";
import { rest } from "msw";
import {
  aListSecretsResponse,
  anOauth2TokenResponse,
  getDiscoveryInstanceResponse,
  getListByServiceResponse,
  getOpenIdConfig,
  getProductListByServiceResponse,
  getSubscriptionResponse,
  getUserResponse
} from "../data/apim-data";
import { aMockErrorResponse } from "../data/common-data";

export const buildHandlers = () => {
  const configuration = getConfiguration();

  return [
    rest.get(
      `https://login.microsoftonline.com/${configuration.AZURE_CLIENT_SECRET_CREDENTIAL_TENANT_ID}/v2.0/.well-known/openid-configuration`,
      (_, res, ctx) => {
        const resultArray = [
          [ctx.status(200), ctx.json(getOpenIdConfig(configuration))],
          [ctx.status(500), ctx.json(getWellKnown500Response())]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.get(
      `https://login.microsoftonline.com/common/discovery/instance`,
      (_, res, ctx) => {
        const resultArray = [
          [
            ctx.status(200),
            ctx.json(getDiscoveryInstanceResponse(configuration))
          ],
          [ctx.status(500), ctx.json(getWellKnown500Response())]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.get(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/users`,
      (req, res, ctx) => {
        const filterSearchParam = req.url.searchParams.get("$filter");
        let isKnownUser = false;
        let userEmail;
        if (filterSearchParam) {
          const matchedGroups = /email\seq\s'(?<email>.*)'/.exec(
            filterSearchParam
          )?.groups;
          if (matchedGroups) {
            userEmail = matchedGroups["email"];
            isKnownUser =
              userEmail ===
              "org.74daefda-7e72-46e2-815a-b26d3bf98988@selfcare.io.pagopa.it";
          }
        }
        const resultArray = [
          [
            ctx.status(200),
            ctx.json(
              isKnownUser
                ? getListByServiceResponse({
                    ...configuration,
                    userEmail
                  })
                : getListByServiceResponse({
                    ...configuration,
                    userEmail,
                    groups: ["ApiServiceRead"]
                  })
            )
          ],
          [ctx.status(500), ctx.json(getWellKnown500Response())]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.post(
      `https://login.microsoftonline.com/${configuration.AZURE_CLIENT_SECRET_CREDENTIAL_TENANT_ID}/oauth2/v2.0/token`,
      (_, res, ctx) => {
        const resultArray = [
          [ctx.status(200), ctx.json(anOauth2TokenResponse)],
          [ctx.status(401), ctx.json(null)],
          [ctx.status(403), ctx.json(null)],
          [ctx.status(500), ctx.json(null)]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.post(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/subscriptions/:subscriptionId/listSecrets`,
      (_, res, ctx) => {
        const resultArray = [
          [ctx.status(200), ctx.json(aListSecretsResponse)],
          [ctx.status(401), ctx.json(null)],
          [ctx.status(403), ctx.json(null)],
          [ctx.status(500), ctx.json(null)]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.put(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/users/:userId`,
      (req, res, ctx) => {
        const resultArray = [
          [
            ctx.status(200),
            ctx.json(
              getUserResponse({
                ...configuration,
                userId: req.params.userId as string
              })
            )
          ],
          [ctx.status(401), ctx.json(null)],
          [ctx.status(403), ctx.json(null)],
          [ctx.status(500), ctx.json(null)]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.put(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/groups/:groupId/users/:userId`,
      (req, res, ctx) => {
        const resultArray = [
          [
            ctx.status(200),
            ctx.json(
              getUserResponse({
                ...configuration,
                userId: req.params.userId as string,
                groups: ["ApiServiceRead"]
              })
            )
          ],
          [ctx.status(401), ctx.json(null)],
          [ctx.status(403), ctx.json(null)],
          [ctx.status(500), ctx.json(null)]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.get(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/subscriptions/:subscriptionId`,
      (req, res, ctx) => {
        const resultArray = [
          [
            ctx.status(200),
            ctx.json(
              getSubscriptionResponse({
                ...configuration,
                subscriptionId: req.params.subscriptionId as string
              })
            )
          ],
          [ctx.status(401), ctx.json(null)],
          [ctx.status(403), ctx.json(null)],
          [ctx.status(500), ctx.json(null)]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.put(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/subscriptions/:subscriptionId`,
      (req, res, ctx) => {
        const resultArray = [
          [
            ctx.status(200),
            ctx.json(
              getSubscriptionResponse({
                ...configuration,
                subscriptionId: req.params.subscriptionId as string
              })
            )
          ],
          [ctx.status(401), ctx.json(null)],
          [ctx.status(403), ctx.json(null)],
          [ctx.status(500), ctx.json(null)]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.get(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/users/:userId/subscriptions`,
      (req, res, ctx) => {
        const resultArray = [
          [
            ctx.status(200),
            ctx.json({
              count: 1,
              nextLink: "",
              value: [
                getSubscriptionResponse({
                  ...configuration,
                  subscriptionId: req.params.subscriptionId as string
                })
              ]
            })
          ],
          [ctx.status(401), ctx.json(null)],
          [ctx.status(403), ctx.json(null)],
          [ctx.status(500), ctx.json(null)]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.get(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/products`,
      (req, res, ctx) => {
        const filterSearchParam = req.url.searchParams.get("$filter");
        let productName;
        if (filterSearchParam) {
          const matchedGroups = /name\seq\s'(?<name>.*)'/.exec(
            filterSearchParam
          )?.groups;
          if (matchedGroups) {
            productName = matchedGroups["name"];
          }
        }
        const resultArray = [
          [
            ctx.status(200),
            ctx.json(
              getProductListByServiceResponse({ ...configuration, productName })
            )
          ],
          [ctx.status(500), ctx.json(getWellKnown500Response())]
        ];

        return res(...resultArray[0]);
      }
    )
  ];
};

export function getWellKnown500Response() {
  return aMockErrorResponse;
}
