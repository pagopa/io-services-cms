/**
 * This file was initially AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
import { getConfiguration } from "@/config";
import { HttpResponse, http } from "msw";
import {
  aListSecretsResponse,
  anOauth2TokenResponse,
  getDiscoveryInstanceResponse,
  getListByServiceResponse,
  getOpenIdConfig,
  getProductListByServiceResponse,
  getSubscriptionResponse,
  getUserResponse,
} from "../data/apim-data";
import { aMockErrorResponse } from "../data/common-data";

export const buildHandlers = () => {
  const configuration = getConfiguration();

  return [
    http.get(
      `https://login.microsoftonline.com/${configuration.AZURE_CLIENT_SECRET_CREDENTIAL_TENANT_ID}/v2.0/.well-known/openid-configuration`,
      () => {
        const resultArray = [
          HttpResponse.json(getOpenIdConfig(configuration) as any, {
            status: 200,
          }),
          HttpResponse.json(getWellKnown500Response(), {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.get(
      `https://login.microsoftonline.com/common/discovery/instance`,
      () => {
        const resultArray = [
          HttpResponse.json(
            getDiscoveryInstanceResponse(configuration) as any,
            {
              status: 200,
            },
          ),
          HttpResponse.json(getWellKnown500Response(), {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.get(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/users`,
      ({ request }) => {
        const url = new URL(request.url);
        const filterSearchParam = url.searchParams.get("$filter");
        let isKnownUser = false;
        let userEmail;
        if (filterSearchParam) {
          const matchedGroups = /email\seq\s'(?<email>.*)'/.exec(
            filterSearchParam,
          )?.groups;
          if (matchedGroups) {
            userEmail = matchedGroups["email"];
            isKnownUser =
              userEmail ===
              "org.74daefda-7e72-46e2-815a-b26d3bf98988@selfcare.io.pagopa.it";
          }
        }
        const resultArray = [
          HttpResponse.json(
            isKnownUser
              ? (getListByServiceResponse({
                  ...configuration,
                  userEmail,
                }) as any)
              : (getListByServiceResponse({
                  ...configuration,
                  userEmail,
                  groups: ["ApiServiceRead"],
                }) as any),
            {
              status: 200,
            },
          ),
          HttpResponse.json(getWellKnown500Response() as any, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.post(
      `https://login.microsoftonline.com/${configuration.AZURE_CLIENT_SECRET_CREDENTIAL_TENANT_ID}/oauth2/v2.0/token`,
      () => {
        const resultArray = [
          HttpResponse.json(anOauth2TokenResponse, {
            status: 200,
          }),
          new HttpResponse(null, {
            status: 401,
          }),
          new HttpResponse(null, {
            status: 403,
          }),
          new HttpResponse(null, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.post(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/subscriptions/:subscriptionId/listSecrets`,
      () => {
        const resultArray = [
          HttpResponse.json(aListSecretsResponse, {
            status: 200,
          }),
          new HttpResponse(null, {
            status: 401,
          }),
          new HttpResponse(null, {
            status: 403,
          }),
          new HttpResponse(null, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.put(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/users/:userId`,
      ({ params }) => {
        const { userId } = params;
        const resultArray = [
          HttpResponse.json(
            getUserResponse({
              ...configuration,
              userId: userId as string,
            }),
            {
              status: 200,
            },
          ),
          new HttpResponse(null, {
            status: 401,
          }),
          new HttpResponse(null, {
            status: 403,
          }),
          new HttpResponse(null, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.put(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/groups/:groupId/users/:userId`,
      ({ params }) => {
        const { userId } = params;
        const resultArray = [
          HttpResponse.json(
            getUserResponse({
              ...configuration,
              userId: userId as string,
              groups: ["ApiServiceRead"],
            }),
            {
              status: 200,
            },
          ),
          new HttpResponse(null, {
            status: 401,
          }),
          new HttpResponse(null, {
            status: 403,
          }),
          new HttpResponse(null, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.get(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/subscriptions/:subscriptionId`,
      ({ params }) => {
        const { subscriptionId } = params;
        const resultArray = [
          HttpResponse.json(
            getSubscriptionResponse({
              ...configuration,
              subscriptionId: subscriptionId as string,
            }),
            {
              status: 200,
            },
          ),
          new HttpResponse(null, {
            status: 401,
          }),
          new HttpResponse(null, {
            status: 403,
          }),
          new HttpResponse(null, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.put(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/subscriptions/:subscriptionId`,
      ({ params }) => {
        const { subscriptionId } = params;
        const resultArray = [
          HttpResponse.json(
            getSubscriptionResponse({
              ...configuration,
              subscriptionId: subscriptionId as string,
            }),
            {
              status: 200,
            },
          ),
          new HttpResponse(null, {
            status: 401,
          }),
          new HttpResponse(null, {
            status: 403,
          }),
          new HttpResponse(null, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.get(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/users/:userId/subscriptions`,
      ({ params }) => {
        const { subscriptionId } = params;
        const resultArray = [
          HttpResponse.json(
            {
              count: 1,
              nextLink: "",
              value: [
                getSubscriptionResponse({
                  ...configuration,
                  subscriptionId: subscriptionId as string,
                }),
              ],
            },
            {
              status: 200,
            },
          ),
          new HttpResponse(null, {
            status: 401,
          }),
          new HttpResponse(null, {
            status: 403,
          }),
          new HttpResponse(null, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.get(
      `https://management.azure.com/subscriptions/${configuration.AZURE_SUBSCRIPTION_ID}/resourceGroups/${configuration.AZURE_APIM_RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${configuration.AZURE_APIM}/products`,
      ({ request }) => {
        const url = new URL(request.url);
        const filterSearchParam = url.searchParams.get("$filter");
        let productName;
        if (filterSearchParam) {
          const matchedGroups = /name\seq\s'(?<name>.*)'/.exec(
            filterSearchParam,
          )?.groups;
          if (matchedGroups) {
            productName = matchedGroups["name"];
          }
        }
        const resultArray = [
          HttpResponse.json(
            getProductListByServiceResponse({
              ...configuration,
              productName,
            }) as any,
            {
              status: 200,
            },
          ),
          HttpResponse.json(getWellKnown500Response(), {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
  ];
};

export function getWellKnown500Response() {
  return aMockErrorResponse;
}
