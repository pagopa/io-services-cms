/**
 * This file was initially AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
import { getConfiguration } from "@/config";
import { faker } from "@faker-js/faker/locale/it";
import { rest } from "msw";
import {
  aMockJwtSessionToken,
  aMockManageKeysCIDRs,
  aMockServicePagination,
  aMockServicePublication,
  anInfoVersion,
  getMockServiceKeys,
  getMockServiceLifecycle,
  getMockServicesMigrationDelegate,
  getMockServicesMigrationLatestStatus,
  getMockServicesMigrationStatusDetails
} from "../data/backend-data";
import { aMockErrorResponse } from "../data/common-data";
import { getMockInstitution } from "../data/selfcare-data";

const MAX_ARRAY_LENGTH = 20;

faker.seed(1);

export const buildHandlers = () => {
  const configuration = getConfiguration();
  const baseURL =
    configuration.API_BACKEND_BASE_URL + configuration.API_BACKEND_BASE_PATH;

  return [
    rest.get(`${baseURL}/info`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getInfo200Response())],
        [ctx.status(500), ctx.json(getInfo500Response())]
      ];

      return res(...resultArray[0]);
    }),
    rest.post(`${baseURL}/auth`, (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.set("Media-Type", "application/jwt"),
          ctx.body(getResolveSelfCareIdentity200Response())
        ],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.get(
      `${baseURL}/services/migrations/ownership-claims/latest`,
      (_, res, ctx) => {
        const resultArray = [
          [
            ctx.status(200),
            ctx.json(getGetServicesMigrationStatus200Response())
          ],
          [ctx.status(401), ctx.json(null)],
          [ctx.status(403), ctx.json(null)],
          [ctx.status(429), ctx.json(null)],
          [ctx.status(500), ctx.json(null)]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.get(`${baseURL}/services/migrations/delegates`, (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(getGetServicesMigrationDelegates200Response())
        ],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.post(
      `${baseURL}/services/migrations/ownership-claims/:delegateId`,
      (_, res, ctx) => {
        const resultArray = [
          [ctx.status(201), ctx.json(null)],
          [ctx.status(401), ctx.json(null)],
          [ctx.status(403), ctx.json(null)],
          [ctx.status(404), ctx.json(null)],
          [ctx.status(429), ctx.json(null)],
          [ctx.status(500), ctx.json(null)]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.get(
      `${baseURL}/services/migrations/ownership-claims/:delegateId`,
      (_, res, ctx) => {
        const resultArray = [
          [
            ctx.status(200),
            ctx.json(getGetServicesMigrationDetails200Response())
          ],
          [ctx.status(401), ctx.json(null)],
          [ctx.status(403), ctx.json(null)],
          [ctx.status(404), ctx.json(null)],
          [ctx.status(429), ctx.json(null)],
          [ctx.status(500), ctx.json(null)]
        ];

        return res(...resultArray[0]);
      }
    ),
    rest.post(`${baseURL}/services`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(201), ctx.json(getCreateService201Response())],
        [ctx.status(400), ctx.json(null)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.get(`${baseURL}/services`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getGetServices200Response())],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.get(`${baseURL}/services/:serviceId`, (req, res, ctx) => {
      const { serviceId } = req.params;
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(getGetService200Response(serviceId as string))
        ],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.put(`${baseURL}/services/:serviceId`, (req, res, ctx) => {
      const { serviceId } = req.params;
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(getUpdateService200Response(serviceId as string))
        ],
        [ctx.status(400), ctx.json(null)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.delete(`${baseURL}/services/:serviceId`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.put(`${baseURL}/services/:serviceId/logo`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204)],
        [ctx.status(400), ctx.json(null)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.get(`${baseURL}/services/:serviceId/keys`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getGetServiceKeys200Response())],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.put(`${baseURL}/services/:serviceId/keys/:keyType`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getRegenerateServiceKey200Response())],
        [ctx.status(400), ctx.json(null)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.put(`${baseURL}/services/:serviceId/review`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(409), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.patch(`${baseURL}/services/:serviceId/review`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204)],
        [ctx.status(400), ctx.json(null)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(409), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.post(`${baseURL}/services/:serviceId/release`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(409), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.get(`${baseURL}/services/:serviceId/release`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getGetPublishedService200Response())],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.delete(`${baseURL}/services/:serviceId/release`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(204)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.get(`${baseURL}/institutions`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getGetInstitutions200Response())],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.get(`${baseURL}/institutions/:institutionId`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getGetInstitution200Response())],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.get(`${baseURL}/keys/manage`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getGetServiceKeys200Response())],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.get(`${baseURL}/keys/manage/cidrs`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getManageKeysCIDRs200Response())],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.put(`${baseURL}/keys/manage/cidrs`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getManageKeysCIDRs200Response())],
        [ctx.status(400), ctx.json(null)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    }),
    rest.put(`${baseURL}/keys/manage/:keyType`, (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getRegenerateServiceKey200Response())],
        [ctx.status(400), ctx.json(null)],
        [ctx.status(401), ctx.json(null)],
        [ctx.status(403), ctx.json(null)],
        [ctx.status(404), ctx.json(null)],
        [ctx.status(429), ctx.json(null)],
        [ctx.status(500), ctx.json(null)]
      ];

      return res(...resultArray[0]);
    })
  ];
};

export function getInfo200Response() {
  return anInfoVersion;
}

export function getInfo500Response() {
  return aMockErrorResponse;
}

export function getResolveSelfCareIdentity200Response() {
  return aMockJwtSessionToken;
}

export function getGetServicesMigrationStatus200Response() {
  return {
    items: [
      ...Array.from(
        Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()
      )
    ].map(_ => ({
      status: getMockServicesMigrationLatestStatus(),
      delegate: getMockServicesMigrationDelegate(),
      lastUpdate: new Date().toISOString()
    }))
  };
}

export function getGetServicesMigrationDelegates200Response() {
  return {
    delegates: [
      ...Array.from(
        Array(faker.number.int({ min: 0, max: MAX_ARRAY_LENGTH })).keys()
      )
    ].map(_ => getMockServicesMigrationDelegate())
  };
}

export function getGetServicesMigrationDetails200Response() {
  return getMockServicesMigrationStatusDetails();
}

export function getCreateService201Response() {
  return getMockServiceLifecycle();
}

export function getGetServices200Response() {
  return aMockServicePagination;
}

export function getGetService200Response(serviceId: string) {
  return getMockServiceLifecycle(serviceId);
}

export function getUpdateService200Response(serviceId: string) {
  return getMockServiceLifecycle(serviceId);
}

export function getGetServiceKeys200Response() {
  return getMockServiceKeys();
}

export function getRegenerateServiceKey200Response() {
  return getMockServiceKeys();
}

export function getManageKeysCIDRs200Response() {
  return aMockManageKeysCIDRs;
}

export function getGetPublishedService200Response() {
  return aMockServicePublication;
}

export function getGetInstitutions200Response() {
  return [
    ...Array.from(
      Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()
    )
  ].map(_ => getMockInstitution());
}

export function getGetInstitution200Response() {
  return getMockInstitution();
}
