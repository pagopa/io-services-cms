/**
 * This file was initially AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
import { getConfiguration } from "@/config";
import { faker } from "@faker-js/faker/locale/it";
import { HttpResponse, http } from "msw";
import {
  aMockManageKeysCIDRs,
  aMockServicePagination,
  aMockServicePublication,
  aMockServiceTopics,
  anInfoVersion,
  getMockInstitutionGroups,
  getMockServiceHistory,
  getMockServiceKeys,
  getMockServiceLifecycle,
  getMockServiceList,
  getMockServicesMigrationDelegate,
  getMockServicesMigrationLatestStatus,
  getMockServicesMigrationStatusDetails,
} from "../data/backend-data";
import { aMockErrorResponse } from "../data/common-data";
import {
  aMockCurrentUserAuthorizedInstitution,
  getMockInstitution,
  getMockUserAuthorizedInstitution,
} from "../data/selfcare-data";

const MAX_ARRAY_LENGTH = 20;

faker.seed(1);

export const buildHandlers = () => {
  const configuration = getConfiguration();
  const baseURL =
    configuration.API_BACKEND_BASE_URL + configuration.API_BACKEND_BASE_PATH;

  return [
    http.get(`${baseURL}/info`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getInfo200Response()), {
          status: 200,
        }),
        new HttpResponse(JSON.stringify(getInfo500Response()), {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/services/migrations/ownership-claims/latest`, () => {
      const resultArray = [
        new HttpResponse(
          JSON.stringify(getGetServicesMigrationStatus200Response()),
          {
            status: 200,
          },
        ),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/services/migrations/delegates`, () => {
      const resultArray = [
        new HttpResponse(
          JSON.stringify(getGetServicesMigrationDelegates200Response()),
          {
            status: 200,
          },
        ),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.post(
      `${baseURL}/services/migrations/ownership-claims/:delegateId`,
      () => {
        const resultArray = [
          new HttpResponse(null, {
            status: 201,
          }),
          new HttpResponse(null, {
            status: 401,
          }),
          new HttpResponse(null, {
            status: 403,
          }),
          new HttpResponse(null, {
            status: 404,
          }),
          new HttpResponse(null, {
            status: 429,
          }),
          new HttpResponse(null, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.get(
      `${baseURL}/services/migrations/ownership-claims/:delegateId`,
      () => {
        const resultArray = [
          new HttpResponse(
            JSON.stringify(getGetServicesMigrationDetails200Response()),
            {
              status: 200,
            },
          ),
          new HttpResponse(null, {
            status: 401,
          }),
          new HttpResponse(null, {
            status: 403,
          }),
          new HttpResponse(null, {
            status: 404,
          }),
          new HttpResponse(null, {
            status: 429,
          }),
          new HttpResponse(null, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.post(`${baseURL}/services`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getCreateService201Response()), {
          status: 201,
        }),
        new HttpResponse(null, {
          status: 400,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/services`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getGetServices200Response()), {
          status: 200,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/services/list`, ({ request }) => {
      const url = new URL(request.url);
      const limit = url.searchParams.get("limit");
      const offset = url.searchParams.get("offset");
      const id = url.searchParams.get("id");

      const resultArray = [
        new HttpResponse(
          JSON.stringify(
            getGetServiceList200Response(
              limit as string,
              offset as string,
              id as string,
            ),
          ),
          {
            status: 200,
          },
        ),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/services/topics`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getGetServiceTopics200Response()), {
          status: 200,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/services/:serviceId`, ({ params }) => {
      const { serviceId } = params;
      const resultArray = [
        new HttpResponse(
          JSON.stringify(getGetService200Response(serviceId as string)),
          {
            status: 200,
          },
        ),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.put(`${baseURL}/services/:serviceId`, ({ params }) => {
      const { serviceId } = params;
      const resultArray = [
        new HttpResponse(
          JSON.stringify(getUpdateService200Response(serviceId as string)),
          {
            status: 200,
          },
        ),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.delete(`${baseURL}/services/:serviceId`, () => {
      const resultArray = [
        new HttpResponse(null, {
          status: 204,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.put(`${baseURL}/services/:serviceId/logo`, () => {
      const resultArray = [
        new HttpResponse(null, {
          status: 204,
        }),
        new HttpResponse(null, {
          status: 400,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(
      `${baseURL}/services/:serviceId/history`,
      ({ request, params }) => {
        const { serviceId } = params;
        const url = new URL(request.url);
        const order = url.searchParams.get("order");
        const limit = url.searchParams.get("limit");
        const continuationToken = url.searchParams.get("continuationToken");

        const resultArray = [
          new HttpResponse(
            JSON.stringify(
              getGetServiceHistory200Response(
                serviceId as string,
                order as "ASC" | "DESC" | null,
                limit,
                continuationToken,
              ),
            ),
            {
              status: 200,
            },
          ),
          new HttpResponse(null, {
            status: 401,
          }),
          new HttpResponse(null, {
            status: 403,
          }),
          new HttpResponse(null, {
            status: 404,
          }),
          new HttpResponse(null, {
            status: 429,
          }),
          new HttpResponse(null, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.get(`${baseURL}/services/:serviceId/keys`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getGetServiceKeys200Response()), {
          status: 200,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.put(`${baseURL}/services/:serviceId/keys/:keyType`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getRegenerateServiceKey200Response()), {
          status: 200,
        }),
        new HttpResponse(null, {
          status: 400,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.put(`${baseURL}/services/:serviceId/review`, () => {
      const resultArray = [
        new HttpResponse(null, {
          status: 204,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 409,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.patch(`${baseURL}/services/:serviceId/review`, () => {
      const resultArray = [
        new HttpResponse(null, {
          status: 204,
        }),
        new HttpResponse(null, {
          status: 400,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 409,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.post(`${baseURL}/services/:serviceId/release`, () => {
      const resultArray = [
        new HttpResponse(null, {
          status: 204,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 409,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/services/:serviceId/release`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getGetPublishedService200Response()), {
          status: 200,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.delete(`${baseURL}/services/:serviceId/release`, () => {
      const resultArray = [
        new HttpResponse(null, {
          status: 204,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/institutions`, () => {
      const resultArray = [
        new HttpResponse(
          JSON.stringify(getUserAuthorizedInstitutions200Response()),
          {
            status: 200,
          },
        ),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/institutions/:institutionId`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getGetInstitution200Response()), {
          status: 200,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/keys/manage`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getGetServiceKeys200Response()), {
          status: 200,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/keys/manage/cidrs`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getManageKeysCIDRs200Response()), {
          status: 200,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.put(`${baseURL}/keys/manage/cidrs`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getManageKeysCIDRs200Response()), {
          status: 200,
        }),
        new HttpResponse(null, {
          status: 400,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.put(`${baseURL}/keys/manage/:keyType`, () => {
      const resultArray = [
        new HttpResponse(JSON.stringify(getRegenerateServiceKey200Response()), {
          status: 200,
        }),
        new HttpResponse(null, {
          status: 400,
        }),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/institutions/:institutionId/groups`, ({ params }) => {
      const { institutionId } = params;
      const resultArray = [
        new HttpResponse(
          JSON.stringify(getMockInstitutionGroups(institutionId as string)),
          {
            status: 200,
          },
        ),
        new HttpResponse(null, {
          status: 401,
        }),
        new HttpResponse(null, {
          status: 403,
        }),
        new HttpResponse(null, {
          status: 404,
        }),
        new HttpResponse(null, {
          status: 429,
        }),
        new HttpResponse(null, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
  ];
};

export function getInfo200Response() {
  return anInfoVersion;
}

export function getInfo500Response() {
  return aMockErrorResponse;
}

export function getGetServicesMigrationStatus200Response() {
  return {
    items: [
      ...Array.from(
        Array(faker.number.int({ min: 0, max: MAX_ARRAY_LENGTH / 2 })).keys(),
      ),
    ].map((_) => ({
      status: getMockServicesMigrationLatestStatus(),
      delegate: getMockServicesMigrationDelegate(),
      lastUpdate: faker.date.recent({ days: 60 }).toISOString(),
    })),
  };
}

export function getGetServicesMigrationDelegates200Response() {
  return {
    delegates: [
      ...Array.from(
        Array(faker.number.int({ min: 0, max: MAX_ARRAY_LENGTH / 2 })).keys(),
      ),
    ].map((_) => getMockServicesMigrationDelegate()),
  };
}

export function getGetServicesMigrationDetails200Response() {
  return getMockServicesMigrationStatusDetails();
}

export function getCreateService201Response() {
  return getMockServiceLifecycle();
}

export function getGetServices200Response() {
  return aMockServicePagination;
}

export function getGetServiceList200Response(
  limit: string,
  offset: string,
  id: string,
) {
  return getMockServiceList(+limit, +offset, id);
}

export function getGetServiceTopics200Response() {
  return aMockServiceTopics;
}

export function getGetService200Response(serviceId: string) {
  return getMockServiceLifecycle(serviceId);
}

export function getUpdateService200Response(serviceId: string) {
  return getMockServiceLifecycle(serviceId);
}

export function getGetServiceHistory200Response(
  serviceId: string,
  order: "ASC" | "DESC" | null,
  limit: string | null,
  continuationToken: string | null,
) {
  return getMockServiceHistory(serviceId, order, limit, continuationToken);
}

export function getGetServiceKeys200Response() {
  return getMockServiceKeys();
}

export function getRegenerateServiceKey200Response() {
  return getMockServiceKeys();
}

export function getManageKeysCIDRs200Response() {
  return aMockManageKeysCIDRs;
}

export function getGetPublishedService200Response() {
  return aMockServicePublication;
}

export function getUserAuthorizedInstitutions200Response() {
  return {
    authorizedInstitutions: [
      aMockCurrentUserAuthorizedInstitution,
      ...Array.from(
        Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
      ),
    ].map((_) => getMockUserAuthorizedInstitution()),
  };
}

export function getGetInstitution200Response() {
  return getMockInstitution();
}

export function getInstitutionGroups200Response(institutionId: string) {
  return getMockInstitutionGroups(institutionId);
}
