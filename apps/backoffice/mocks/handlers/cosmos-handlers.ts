/**
 * This file was initially AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
import { Config } from "@/lib/be/cosmos-store";
import { HttpResponse, http } from "msw";

import { aMockErrorResponse } from "../data/common-data";
import {
  aMockServicesLifecycleCollection,
  aMockServicesLifecyclePkranges,
  info,
} from "../data/cosmos-data";

export const buildHandlers = (config: Config) => {
  const baseUrl = new URL(config.COSMOSDB_URI).href;

  return [
    http.get(
      baseUrl,
      (_) =>
        new HttpResponse(JSON.stringify(info), {
          status: 200,
        }),
    ),
    http.get(
      `${baseUrl}dbs/db-services-cms/colls/services-lifecycle`,
      (_) =>
        new HttpResponse(JSON.stringify(aMockServicesLifecycleCollection), {
          status: 200,
        }),
    ),
    http.get(
      `${baseUrl}dbs/db-services-cms/colls/services-lifecycle/pkranges`,
      (_) =>
        new HttpResponse(JSON.stringify(aMockServicesLifecyclePkranges), {
          status: 200,
        }),
    ),
    // bulkFetch
    http.post(
      `${baseUrl}dbs/db-services-cms/colls/services-lifecycle/docs`,
      async ({ request }) => {
        const response = new HttpResponse(
          JSON.stringify([{ requestCharge: 1, statusCode: 404 }]),
          {
            status: 200,
          },
        );
        return response;
        // const reqBody = await request.json();
        // console.log("bulkFetch", reqBody);
        // if (Array.isArray(reqBody)) {
        //   console.log("is array");
        //   const resBody = reqBody.map((id) =>
        //     aMockServiceLifecycleBulkFetchDocuments(id),
        //   );
        //   console.log("resBody", resBody);
        //   return new HttpResponse(JSON.stringify(resBody), {
        //     status: 200,
        //   });
        // }
        // return new HttpResponse(JSON.stringify(get500Response()), {
        //   status: 500,
        // });
      },
    ),
  ];
};

function get500Response() {
  return aMockErrorResponse;
}
