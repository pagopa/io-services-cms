/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was initially AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
import { getConfiguration } from "@/config";
import { faker } from "@faker-js/faker/locale/it";
import { HttpResponse, http } from "msw";

import { aMockErrorResponse } from "../data/common-data";
import {
  aWellKnown,
  getMockInstitution,
  getMockInstitutionGroups,
  getMockInstitutionProducts,
  getMockUserInstitution,
  getSelfCareProblemResponse,
} from "../data/selfcare-data";

faker.seed(1);

export const buildHandlers = () => {
  const configuration = getConfiguration();
  const baseURL = configuration.SELFCARE_EXTERNAL_API_BASE_URL;

  return [
    http.get(configuration.SELFCARE_JWKS_URL, () => {
      const resultArray = [
        HttpResponse.json(getWellKnown200Response() as any, { status: 200 }),
        HttpResponse.json(getWellKnown500Response() as any, { status: 500 }),
      ];

      return resultArray[0];
    }),
    http.get(`${baseURL}/users`, ({ request }) => {
      const url = new URL(request.url);
      const userId = url.searchParams.get("userId") ?? undefined;
      const resultArray = [
        HttpResponse.json([getMockUserInstitution(userId)] as any, {
          status: 200,
        }),
        HttpResponse.json(getSelfCareProblemResponse(404) as any, {
          status: 404,
        }),
        HttpResponse.json(getSelfCareProblemResponse(500) as any, {
          status: 500,
        }),
      ];
      return resultArray[0];
    }),
    http.get(`${baseURL}/institutions/:institutionId`, ({ params }) => {
      const { institutionId } = params;
      const resultArray = [
        HttpResponse.json(getMockInstitution(institutionId as string) as any, {
          status: 200,
        }),
        HttpResponse.json(getSelfCareProblemResponse(404) as any, {
          status: 404,
        }),
        HttpResponse.json(getSelfCareProblemResponse(500) as any, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
    http.get(
      `${baseURL}/institutions/:institutionId/products`,
      ({ params }) => {
        const { institutionId } = params;
        const resultArray = [
          HttpResponse.json(
            getMockInstitutionProducts(institutionId as string) as any,
            {
              status: 200,
            },
          ),
          HttpResponse.json(getSelfCareProblemResponse(404) as any, {
            status: 404,
          }),
          HttpResponse.json(getSelfCareProblemResponse(500) as any, {
            status: 500,
          }),
        ];

        return resultArray[0];
      },
    ),
    http.get(`${baseURL}/user-groups`, ({ request }) => {
      const url = new URL(request.url);
      const institutionId = url.searchParams.get("institutionId") ?? undefined;
      const resultArray = [
        HttpResponse.json(
          getMockInstitutionGroups(institutionId as string) as any,
          {
            status: 200,
          },
        ),
        HttpResponse.json(getSelfCareProblemResponse(404) as any, {
          status: 404,
        }),
        HttpResponse.json(getSelfCareProblemResponse(500) as any, {
          status: 500,
        }),
      ];

      return resultArray[0];
    }),
  ];
};

export function getWellKnown200Response() {
  return aWellKnown;
}

export function getWellKnown500Response() {
  return aMockErrorResponse;
}
