/**
 * This file was initially AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
import { faker } from "@faker-js/faker/locale/it";
import { HttpResponse, http } from "msw";
import {
  getDelegatesByOrganizationMockResponse,
  getLatestOwnershipClaimStatusMockResponse,
  getOwnershipClaimStatusMockResponse
} from "../data/subscription-migration-data";

faker.seed(new Date().getTime());

export const buildHandlers = () => {
  const baseURL = process.env.SUBSCRIPTION_MIGRATION_API_URL;

  return [
    http.get(
      `${baseURL}/organizations/:organizationFiscalCode/ownership-claims/latest`,
      () => {
        const resultArray = [
          new HttpResponse(
            JSON.stringify(getLatestOwnershipClaimStatusMockResponse()),
            {
              status: 200
            }
          ),
          new HttpResponse(null, {
            status: 400
          }),
          new HttpResponse(null, {
            status: 401
          }),
          new HttpResponse(null, {
            status: 404
          }),
          new HttpResponse(null, {
            status: 500
          })
        ];

        return resultArray[0];
      }
    ),
    http.get(
      `${baseURL}/organizations/:organizationFiscalCode/ownership-claims/:delegateId`,
      () => {
        const resultArray = [
          new HttpResponse(
            JSON.stringify(getOwnershipClaimStatusMockResponse()),
            {
              status: 200
            }
          ),
          new HttpResponse(null, {
            status: 400
          }),
          new HttpResponse(null, {
            status: 401
          }),
          new HttpResponse(null, {
            status: 404
          }),
          new HttpResponse(null, {
            status: 500
          })
        ];
        return resultArray[0];
      }
    ),
    http.post(
      `${baseURL}/organizations/:organizationFiscalCode/ownership-claims/:delegateId`,
      () => {
        const resultArray = [
          new HttpResponse(null, {
            status: 202
          }),
          new HttpResponse(null, {
            status: 400
          }),
          new HttpResponse(null, {
            status: 401
          }),
          new HttpResponse(null, {
            status: 404
          }),
          new HttpResponse(null, {
            status: 500
          })
        ];
        return resultArray[0];
      }
    ),
    http.get(
      `${baseURL}/organizations/:organizationFiscalCode/delegates`,
      () => {
        const resultArray = [
          new HttpResponse(
            JSON.stringify(getDelegatesByOrganizationMockResponse()),
            {
              status: 200
            }
          ),
          new HttpResponse(null, {
            status: 400
          }),
          new HttpResponse(null, {
            status: 401
          }),
          new HttpResponse(null, {
            status: 404
          }),
          new HttpResponse(null, {
            status: 500
          })
        ];
        return resultArray[0];
      }
    )
  ];
};
