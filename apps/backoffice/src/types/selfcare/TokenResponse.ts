/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import { InstitutionUpdate } from "./InstitutionUpdate";
import { LegalsResponse } from "./LegalsResponse";
import { TokenUser } from "./TokenUser";
import * as t from "io-ts";
import { UTCISODateFromString } from "@pagopa/ts-commons/lib/dates";
import { enumType } from "@pagopa/ts-commons/lib/types";

export enum StatusEnum {
  "ACTIVE" = "ACTIVE",

  "DELETED" = "DELETED",

  "PENDING" = "PENDING",

  "REJECTED" = "REJECTED",

  "SUSPENDED" = "SUSPENDED",

  "TOBEVALIDATED" = "TOBEVALIDATED"
}

// required attributes
const TokenResponseR = t.interface({});

// optional attributes
const TokenResponseO = t.partial({
  checksum: t.string,

  closedAt: UTCISODateFromString,

  contentType: t.string,

  contractSigned: t.string,

  contractTemplate: t.string,

  contractVersion: t.string,

  createdAt: UTCISODateFromString,

  expiringDate: UTCISODateFromString,

  id: t.string,

  institutionId: t.string,

  institutionUpdate: InstitutionUpdate,

  legals: t.readonlyArray(LegalsResponse, "array of LegalsResponse"),

  productId: t.string,

  status: enumType<StatusEnum>(StatusEnum, "status"),

  updatedAt: UTCISODateFromString,

  users: t.readonlyArray(TokenUser, "array of TokenUser")
});

export const TokenResponse = t.exact(
  t.intersection([TokenResponseR, TokenResponseO], "TokenResponse")
);

export type TokenResponse = t.TypeOf<typeof TokenResponse>;
