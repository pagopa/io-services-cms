// DO NOT EDIT THIS FILE
// This file has been generated by gen-api-models
// eslint-disable sonar/max-union-size
// eslint-disable sonarjs/no-identical-functions

import * as t from "io-ts";

import * as r from "@pagopa/ts-commons/lib/requests";

import { Problem } from "./Problem";

import { Institution } from "./Institution";
import { InstitutionResources } from "./InstitutionResource";

/****************************************************************
 * getInstitutionsUsingGET
 */

// Request type definition
export type GetInstitutionsUsingGETT = r.IGetApiRequestType<
  { readonly apiKeyHeader: string; readonly userIdForAuth: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, InstitutionResources, never>
  | r.IResponseType<400, Problem, never>
  | r.IResponseType<401, Problem, never>
  | r.IResponseType<404, Problem, never>
  | r.IResponseType<500, Problem, never>
>;

export const getInstitutionsUsingGETDefaultResponses = {
  200: InstitutionResources,
  400: Problem,
  401: Problem,
  404: Problem,
  500: Problem
};

export type GetInstitutionsUsingGETResponsesT<
  A0 = InstitutionResources,
  C0 = InstitutionResources,
  A1 = Problem,
  C1 = Problem,
  A2 = Problem,
  C2 = Problem,
  A3 = Problem,
  C3 = Problem,
  A4 = Problem,
  C4 = Problem
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  401: t.Type<A2, C2>;
  404: t.Type<A3, C3>;
  500: t.Type<A4, C4>;
};

export function getInstitutionsUsingGETDecoder<
  A0 = InstitutionResources,
  C0 = InstitutionResources,
  A1 = Problem,
  C1 = Problem,
  A2 = Problem,
  C2 = Problem,
  A3 = Problem,
  C3 = Problem,
  A4 = Problem,
  C4 = Problem
>(
  overrideTypes:
    | Partial<
        GetInstitutionsUsingGETResponsesT<
          A0,
          C0,
          A1,
          C1,
          A2,
          C2,
          A3,
          C3,
          A4,
          C4
        >
      >
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<401, A2, never>
  | r.IResponseType<404, A3, never>
  | r.IResponseType<500, A4, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((getInstitutionsUsingGETDefaultResponses as unknown) as GetInstitutionsUsingGETResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d401 = (type[401].name === "undefined"
    ? r.constantResponseDecoder<undefined, 401, never>(401, undefined)
    : r.ioResponseDecoder<
        401,
        typeof type[401]["_A"],
        typeof type[401]["_O"],
        never
      >(401, type[401])) as r.ResponseDecoder<r.IResponseType<401, A2, never>>;

  const d404 = (type[404].name === "undefined"
    ? r.constantResponseDecoder<undefined, 404, never>(404, undefined)
    : r.ioResponseDecoder<
        404,
        typeof type[404]["_A"],
        typeof type[404]["_O"],
        never
      >(404, type[404])) as r.ResponseDecoder<r.IResponseType<404, A3, never>>;

  const d500 = (type[500].name === "undefined"
    ? r.constantResponseDecoder<undefined, 500, never>(500, undefined)
    : r.ioResponseDecoder<
        500,
        typeof type[500]["_A"],
        typeof type[500]["_O"],
        never
      >(500, type[500])) as r.ResponseDecoder<r.IResponseType<500, A4, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(r.composeResponseDecoders(d200, d400), d401),
      d404
    ),
    d500
  );
}

// Decodes the success response with the type defined in the specs
export const getInstitutionsUsingGETDefaultDecoder = () =>
  getInstitutionsUsingGETDecoder();

/****************************************************************
 * getInstitution
 */

// Request type definition
export type GetInstitutionT = r.IGetApiRequestType<
  { readonly apiKeyHeader: string; readonly id: string },
  "Ocp-Apim-Subscription-Key",
  never,
  | r.IResponseType<200, Institution, never>
  | r.IResponseType<400, Problem, never>
  | r.IResponseType<404, Problem, never>
>;

export const getInstitutionDefaultResponses = {
  200: Institution,
  400: Problem,
  404: Problem
};

export type GetInstitutionResponsesT<
  A0 = Institution,
  C0 = Institution,
  A1 = Problem,
  C1 = Problem,
  A2 = Problem,
  C2 = Problem
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  404: t.Type<A2, C2>;
};

export function getInstitutionDecoder<
  A0 = Institution,
  C0 = Institution,
  A1 = Problem,
  C1 = Problem,
  A2 = Problem,
  C2 = Problem
>(
  overrideTypes:
    | Partial<GetInstitutionResponsesT<A0, C0, A1, C1, A2, C2>>
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<404, A2, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((getInstitutionDefaultResponses as unknown) as GetInstitutionResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d404 = (type[404].name === "undefined"
    ? r.constantResponseDecoder<undefined, 404, never>(404, undefined)
    : r.ioResponseDecoder<
        404,
        typeof type[404]["_A"],
        typeof type[404]["_O"],
        never
      >(404, type[404])) as r.ResponseDecoder<r.IResponseType<404, A2, never>>;

  return r.composeResponseDecoders(r.composeResponseDecoders(d200, d400), d404);
}

// Decodes the success response with the type defined in the specs
export const getInstitutionDefaultDecoder = () => getInstitutionDecoder();
