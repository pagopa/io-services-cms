openapi: 3.0.3
info:
  title: IO Services CMS
  description: |-
    _This is the IO Service CMS based on the OpenAPI 3.0 specification._

    ### Some useful links:
    - [IO-SERVICES-CMS Github codebase](https://github.com/pagopa/io-services-cms)
    - [IO-SERVICES-CMS Source API definition ](https://raw.githubusercontent.com/pagopa/io-services-cms/master/apps/io-services-cms-webapp/openapi.yaml)

  contact:
    name: PagoPA S.p.A.
    url: https://docs.pagopa.it/io-guida-tecnica/
  version: 1.23.0
servers:
  - url: https://api.io.pagopa.it/api/v1/manage
tags:
  - name: services
    description: Services API specification
  - name: service-review
    description: Service Review API specification
  - name: service-release
    description: Service Release API specification
  - name: service-authorization
    description: Service Authorization API specification
  - name: service-topics
    description: Services thematic taxonomy
  - name: service-history
    description: Services history
paths:
  /info:
    get:
      description: Get runtime status information about the application
      operationId: info
      security: [] # public endpoint
      responses:
        '200':
          description: The application is up and running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
        '500':
          description: The fails to startup due to misconfiguration or unreachable dependencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /services:
    post:
      tags:
        - services
      summary: Create a new service
      description: Create a new Service with the attributes provided in the request payload
      operationId: createService
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
      requestBody:
        description: A service body payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePayload'
        required: true
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLifecycle'
        '400':
          description: Invalid payload
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too many requests
        '500':
          description: Internal server error
    get:
      tags:
        - services
      summary: Retrieve all services
      description: Retrieve all services owned by the calling user
      operationId: getServices
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: limit
          in: query
          description: The number of services to return
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: The number of services to skip before starting to collect the result set
          required: false
          schema:
            type: number
            minimum: 0
            default: 0
      responses:
        '200':
          description: Services fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePagination'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too many requests
        '500':
          description: Internal server error
  /services/topics:
    get:
      tags:
        - service-topics
      summary: Retrieve all services
      description: Retrieve all service topics
      operationId: getServiceTopics
      parameters:
        - $ref: '#/components/parameters/XForwardedFor'
      responses:
        '200':
          description: Service topics fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTopicList'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too many requests
        '500':
          description: Internal server error
  /services/{serviceId}:
    get:
      tags:
        - services
      summary: Retrieve service
      description: Retrieve a service by ID
      operationId: getService
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLifecycle'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
    put:
      tags:
        - services
      summary: Update service
      description: Update an existing service by ID
      operationId: updateService
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      requestBody:
        description: Updated service payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePayload'
        required: true
      responses:
        '200':
          description: Service updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLifecycle'
        '400':
          description: Invalid payload
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
    delete:
      tags:
        - services
      summary: Delete service
      description: Delete a service by ID
      operationId: deleteService
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Service deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
  /services/{serviceId}/logo:
    put:
      tags:
        - services
      summary: Upload service logo
      description: Upload service logo by service ID
      operationId: updateServiceLogo
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      requestBody:
        description: Service logo payload _(base64 string representation)_
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logo'
        required: true
      responses:
        '204':
          description: Service logo updated successfully
        '400':
          description: Invalid payload
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
  /services/{serviceId}/history:
    get:
      tags:
        - service-history
      summary: Retrieve service history
      description: Retrieve service history by service ID
      operationId: getServiceHistory
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
        - name: order
          in: query
          description: Order direction
          required: false
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
        - name: limit
          in: query
          description: The number of services to return
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 100
            default: 10
        - name: continuationToken
          in: query
          description: Token to retrieve the next page of results
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Service history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHistory'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
  /services/{serviceId}/keys:
    get:
      tags:
        - service-authorization
      summary: Retrieve service keys
      description: Retrieve service keys by service ID
      operationId: getServiceKeys
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service keys fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionKeys'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
  /services/{serviceId}/keys/{keyType}:
    put:
      tags:
        - service-authorization
      summary: Regenerate service key
      description: Regenerate service key by service ID and key type
      operationId: regenerateServiceKey
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
        - name: keyType
          in: path
          description: Key type
          required: true
          schema:
            $ref: '#/components/schemas/SubscriptionKeyType'
      responses:
        '200':
          description: Service key regenerated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionKeys'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
  /services/{serviceId}/review:
    put:
      tags:
        - service-review
      summary: Send service to review
      description: Send service to review by service ID
      operationId: reviewService
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      requestBody:
        description: Review Request option
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
        required: true
      responses:
        '204':
          description: Service revirew taken in charge
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '409':
          description: Service status is incompatible with review action request
        '429':
          description: Too many requests
        '500':
          description: Internal server error
    patch:
      tags:
        - service-review
      summary: Explain service review
      description: Explain service review by service ID
      operationId: explainService
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      requestBody:
        description: An explanation comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '204':
          description: Service explained successfully
        '400':
          description: Invalid payload
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '409':
          description: Service status is incompatible with explain action request
        '429':
          description: Too many requests
        '500':
          description: Internal server error
  /services/{serviceId}/release:
    post:
      tags:
        - service-release
      summary: Publish service on IO
      description: Publish service by ID on __IO Platform__
      operationId: releaseService
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Service published successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '409':
          description: Service status is incompatible with publish action request
        '429':
          description: Too many requests
        '500':
          description: Internal server error
    get:
      tags:
        - service-release
      summary: Retrieve last published version of service
      description: Retrieve last version of service published on __IO Platform__
      operationId: getPublishedService
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Fetched published service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePublication'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
    delete:
      tags:
        - service-release
      summary: Unpublish service from IO
      description: Unpublish service by ID from __IO Platform__
      operationId: unpublishService
      parameters:
        - $ref: '#/components/parameters/UserEmail'
        - $ref: '#/components/parameters/UserGroups'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/SubscriptionID'
        - $ref: '#/components/parameters/XForwardedFor'
        - $ref: '#/components/parameters/UserGroupsSelc'
        - $ref: '#/components/parameters/Channel'
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Service unpublished successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
components:
  parameters:
    UserEmail:
      in: header
      name: x-user-email
      required: true
      schema:
        type: string
    UserGroups:
      in: header
      name: x-user-groups
      required: true
      schema:
        type: string
    UserID:
      in: header
      name: x-user-id
      required: true
      schema:
        type: string
    SubscriptionID:
      in: header
      name: x-subscription-id
      required: true
      schema:
        type: string
    XForwardedFor:
      in: header
      name: X-Forwarded-For
      required: true
      schema:
        type: string
    UserGroupsSelc:
      in: header
      name: x-user-groups-selc
      required: false
      schema:
        type: string
    Channel:
      in: header
      name: x-channel
      required: true
      schema:
        type: string
  schemas:
    Info:
      type: object
      properties:
        version:
          type: string
          description: the application version
        name:
          type: string
          description: the application name
    ServiceHistory:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceHistory'
    ServiceHistoryItem:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceHistoryItem'
    ServiceHistoryItemStatus:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceHistoryItemStatus'
    ServiceHistoryStatusKind:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceHistoryStatusKind'
    ServiceHistoryStatusType:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceHistoryStatusType'
    ServiceLifecycle:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceLifecycle'
    ServicePublication:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServicePublication'
    ServicePayload:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServicePayload'
    ServiceData:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceData'
    ServiceBaseMetadata:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceBaseMetadata'
    ServiceMetadata:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceMetadata'
    ServicePayloadMetadata:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServicePayloadMetadata'
    ServiceLifecycleStatus:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceLifecycleStatus'
    ServiceLifecycleStatusType:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceLifecycleStatusType'
    ServicePublicationStatusType:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServicePublicationStatusType'
    ServicePagination:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServicePagination'
    ServiceTopicList:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceTopicList'
    ServiceTopic:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ServiceTopic'
    PaginationResultSet:
      $ref: 'https://raw.githubusercontent.com/pagopa/io-services-cms/master/packages/io-services-cms-models/openapi/commons-schemas.yaml#/PaginationResultSet'
    Organization:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/Organization'
    OrganizationFiscalCode:
      $ref: 'https://raw.githubusercontent.com/pagopa/io-services-cms/master/packages/io-services-cms-models/openapi/commons-schemas.yaml#/OrganizationFiscalCode'
    FiscalCode:
      $ref: 'https://raw.githubusercontent.com/pagopa/io-services-cms/master/packages/io-services-cms-models/openapi/commons-schemas.yaml#/FiscalCode'
    Logo:
      $ref: 'https://raw.githubusercontent.com/pagopa/io-services-cms/master/packages/io-services-cms-models/openapi/commons-schemas.yaml#/Logo'
    SubscriptionKeys:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/SubscriptionKeys'
    SubscriptionKeyType:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/SubscriptionKeyType'
    Cidr:
      $ref: 'https://raw.githubusercontent.com/pagopa/io-services-cms/master/packages/io-services-cms-models/openapi/commons-schemas.yaml#/Cidr'
    ResponseError:
      $ref: 'https://raw.githubusercontent.com/pagopa/io-services-cms/master/packages/io-services-cms-models/openapi/commons-schemas.yaml#/ResponseError'
    Comment:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/Comment'
    ReviewRequest:
      $ref: '../../packages/io-services-cms-models/openapi/services-cms-schemas.yaml#/ReviewRequest'
    Timestamp:
      $ref: 'https://raw.githubusercontent.com/pagopa/io-services-cms/master/packages/io-services-cms-models/openapi/commons-schemas.yaml#/Timestamp'
    InternalServiceTopic:
      type: object
      properties:
        id:
          type: number
          description: The topic id
          example: 3
        name:
          type: string
          description: The topic name
          example: 'Benessere sociale'
        deleted:
          type: boolean
          description: if the topic is deleted
          example: false
      required:
        - id
        - name
        - deleted
    InternalServiceTopicList:
      type: object
      properties:
        topics:
          type: array
          items:
            $ref: '#/components/schemas/InternalServiceTopic'
